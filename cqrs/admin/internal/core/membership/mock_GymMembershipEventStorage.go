// Code generated by mockery v2.20.0. DO NOT EDIT.

package membership

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockGymMembershipEventStorage is an autogenerated mock type for the GymMembershipEventStorage type
type MockGymMembershipEventStorage struct {
	mock.Mock
}

type MockGymMembershipEventStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGymMembershipEventStorage) EXPECT() *MockGymMembershipEventStorage_Expecter {
	return &MockGymMembershipEventStorage_Expecter{mock: &_m.Mock}
}

// CreateGymMembership provides a mock function with given fields: ctx, owner, expiresInDays
func (_m *MockGymMembershipEventStorage) CreateGymMembership(ctx context.Context, owner string, expiresInDays uint) error {
	ret := _m.Called(ctx, owner, expiresInDays)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint) error); ok {
		r0 = rf(ctx, owner, expiresInDays)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGymMembershipEventStorage_CreateGymMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGymMembership'
type MockGymMembershipEventStorage_CreateGymMembership_Call struct {
	*mock.Call
}

// CreateGymMembership is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - expiresInDays uint
func (_e *MockGymMembershipEventStorage_Expecter) CreateGymMembership(ctx interface{}, owner interface{}, expiresInDays interface{}) *MockGymMembershipEventStorage_CreateGymMembership_Call {
	return &MockGymMembershipEventStorage_CreateGymMembership_Call{Call: _e.mock.On("CreateGymMembership", ctx, owner, expiresInDays)}
}

func (_c *MockGymMembershipEventStorage_CreateGymMembership_Call) Run(run func(ctx context.Context, owner string, expiresInDays uint)) *MockGymMembershipEventStorage_CreateGymMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint))
	})
	return _c
}

func (_c *MockGymMembershipEventStorage_CreateGymMembership_Call) Return(_a0 error) *MockGymMembershipEventStorage_CreateGymMembership_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGymMembershipEventStorage_CreateGymMembership_Call) RunAndReturn(run func(context.Context, string, uint) error) *MockGymMembershipEventStorage_CreateGymMembership_Call {
	_c.Call.Return(run)
	return _c
}

// FindGymMembershipCreatedEvent provides a mock function with given fields: ctx, id
func (_m *MockGymMembershipEventStorage) FindGymMembershipCreatedEvent(ctx context.Context, id uint) (*GymMembershipCreatedEvent, error) {
	ret := _m.Called(ctx, id)

	var r0 *GymMembershipCreatedEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*GymMembershipCreatedEvent, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *GymMembershipCreatedEvent); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GymMembershipCreatedEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGymMembershipEventStorage_FindGymMembershipCreatedEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindGymMembershipCreatedEvent'
type MockGymMembershipEventStorage_FindGymMembershipCreatedEvent_Call struct {
	*mock.Call
}

// FindGymMembershipCreatedEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockGymMembershipEventStorage_Expecter) FindGymMembershipCreatedEvent(ctx interface{}, id interface{}) *MockGymMembershipEventStorage_FindGymMembershipCreatedEvent_Call {
	return &MockGymMembershipEventStorage_FindGymMembershipCreatedEvent_Call{Call: _e.mock.On("FindGymMembershipCreatedEvent", ctx, id)}
}

func (_c *MockGymMembershipEventStorage_FindGymMembershipCreatedEvent_Call) Run(run func(ctx context.Context, id uint)) *MockGymMembershipEventStorage_FindGymMembershipCreatedEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockGymMembershipEventStorage_FindGymMembershipCreatedEvent_Call) Return(_a0 *GymMembershipCreatedEvent, _a1 error) *MockGymMembershipEventStorage_FindGymMembershipCreatedEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGymMembershipEventStorage_FindGymMembershipCreatedEvent_Call) RunAndReturn(run func(context.Context, uint) (*GymMembershipCreatedEvent, error)) *MockGymMembershipEventStorage_FindGymMembershipCreatedEvent_Call {
	_c.Call.Return(run)
	return _c
}

// FindGymMembershipProlongedEvents provides a mock function with given fields: ctx, id
func (_m *MockGymMembershipEventStorage) FindGymMembershipProlongedEvents(ctx context.Context, id uint) ([]GymMembershipProlongedEvent, error) {
	ret := _m.Called(ctx, id)

	var r0 []GymMembershipProlongedEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]GymMembershipProlongedEvent, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []GymMembershipProlongedEvent); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GymMembershipProlongedEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGymMembershipEventStorage_FindGymMembershipProlongedEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindGymMembershipProlongedEvents'
type MockGymMembershipEventStorage_FindGymMembershipProlongedEvents_Call struct {
	*mock.Call
}

// FindGymMembershipProlongedEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockGymMembershipEventStorage_Expecter) FindGymMembershipProlongedEvents(ctx interface{}, id interface{}) *MockGymMembershipEventStorage_FindGymMembershipProlongedEvents_Call {
	return &MockGymMembershipEventStorage_FindGymMembershipProlongedEvents_Call{Call: _e.mock.On("FindGymMembershipProlongedEvents", ctx, id)}
}

func (_c *MockGymMembershipEventStorage_FindGymMembershipProlongedEvents_Call) Run(run func(ctx context.Context, id uint)) *MockGymMembershipEventStorage_FindGymMembershipProlongedEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockGymMembershipEventStorage_FindGymMembershipProlongedEvents_Call) Return(_a0 []GymMembershipProlongedEvent, _a1 error) *MockGymMembershipEventStorage_FindGymMembershipProlongedEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGymMembershipEventStorage_FindGymMembershipProlongedEvents_Call) RunAndReturn(run func(context.Context, uint) ([]GymMembershipProlongedEvent, error)) *MockGymMembershipEventStorage_FindGymMembershipProlongedEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ProlongGymMembership provides a mock function with given fields: ctx, membershipID, extraDays
func (_m *MockGymMembershipEventStorage) ProlongGymMembership(ctx context.Context, membershipID uint, extraDays uint) error {
	ret := _m.Called(ctx, membershipID, extraDays)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) error); ok {
		r0 = rf(ctx, membershipID, extraDays)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGymMembershipEventStorage_ProlongGymMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProlongGymMembership'
type MockGymMembershipEventStorage_ProlongGymMembership_Call struct {
	*mock.Call
}

// ProlongGymMembership is a helper method to define mock.On call
//   - ctx context.Context
//   - membershipID uint
//   - extraDays uint
func (_e *MockGymMembershipEventStorage_Expecter) ProlongGymMembership(ctx interface{}, membershipID interface{}, extraDays interface{}) *MockGymMembershipEventStorage_ProlongGymMembership_Call {
	return &MockGymMembershipEventStorage_ProlongGymMembership_Call{Call: _e.mock.On("ProlongGymMembership", ctx, membershipID, extraDays)}
}

func (_c *MockGymMembershipEventStorage_ProlongGymMembership_Call) Run(run func(ctx context.Context, membershipID uint, extraDays uint)) *MockGymMembershipEventStorage_ProlongGymMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(uint))
	})
	return _c
}

func (_c *MockGymMembershipEventStorage_ProlongGymMembership_Call) Return(_a0 error) *MockGymMembershipEventStorage_ProlongGymMembership_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGymMembershipEventStorage_ProlongGymMembership_Call) RunAndReturn(run func(context.Context, uint, uint) error) *MockGymMembershipEventStorage_ProlongGymMembership_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockGymMembershipEventStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockGymMembershipEventStorage creates a new instance of MockGymMembershipEventStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockGymMembershipEventStorage(t mockConstructorTestingTNewMockGymMembershipEventStorage) *MockGymMembershipEventStorage {
	mock := &MockGymMembershipEventStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.20.0. DO NOT EDIT.

package membership

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockEventStorage is an autogenerated mock type for the EventStorage type
type MockEventStorage struct {
	mock.Mock
}

type MockEventStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventStorage) EXPECT() *MockEventStorage_Expecter {
	return &MockEventStorage_Expecter{mock: &_m.Mock}
}

// FindGymMembershipCreatedEvent provides a mock function with given fields: ctx, id
func (_m *MockEventStorage) FindGymMembershipCreatedEvent(ctx context.Context, id uint) (*GymMembershipCreatedEvent, error) {
	ret := _m.Called(ctx, id)

	var r0 *GymMembershipCreatedEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*GymMembershipCreatedEvent, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *GymMembershipCreatedEvent); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GymMembershipCreatedEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventStorage_FindGymMembershipCreatedEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindGymMembershipCreatedEvent'
type MockEventStorage_FindGymMembershipCreatedEvent_Call struct {
	*mock.Call
}

// FindGymMembershipCreatedEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockEventStorage_Expecter) FindGymMembershipCreatedEvent(ctx interface{}, id interface{}) *MockEventStorage_FindGymMembershipCreatedEvent_Call {
	return &MockEventStorage_FindGymMembershipCreatedEvent_Call{Call: _e.mock.On("FindGymMembershipCreatedEvent", ctx, id)}
}

func (_c *MockEventStorage_FindGymMembershipCreatedEvent_Call) Run(run func(ctx context.Context, id uint)) *MockEventStorage_FindGymMembershipCreatedEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockEventStorage_FindGymMembershipCreatedEvent_Call) Return(_a0 *GymMembershipCreatedEvent, _a1 error) *MockEventStorage_FindGymMembershipCreatedEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventStorage_FindGymMembershipCreatedEvent_Call) RunAndReturn(run func(context.Context, uint) (*GymMembershipCreatedEvent, error)) *MockEventStorage_FindGymMembershipCreatedEvent_Call {
	_c.Call.Return(run)
	return _c
}

// FindGymMembershipProlongedEvents provides a mock function with given fields: ctx, id
func (_m *MockEventStorage) FindGymMembershipProlongedEvents(ctx context.Context, id uint) ([]GymMembershipProlongedEvent, error) {
	ret := _m.Called(ctx, id)

	var r0 []GymMembershipProlongedEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]GymMembershipProlongedEvent, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []GymMembershipProlongedEvent); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GymMembershipProlongedEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventStorage_FindGymMembershipProlongedEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindGymMembershipProlongedEvents'
type MockEventStorage_FindGymMembershipProlongedEvents_Call struct {
	*mock.Call
}

// FindGymMembershipProlongedEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockEventStorage_Expecter) FindGymMembershipProlongedEvents(ctx interface{}, id interface{}) *MockEventStorage_FindGymMembershipProlongedEvents_Call {
	return &MockEventStorage_FindGymMembershipProlongedEvents_Call{Call: _e.mock.On("FindGymMembershipProlongedEvents", ctx, id)}
}

func (_c *MockEventStorage_FindGymMembershipProlongedEvents_Call) Run(run func(ctx context.Context, id uint)) *MockEventStorage_FindGymMembershipProlongedEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockEventStorage_FindGymMembershipProlongedEvents_Call) Return(_a0 []GymMembershipProlongedEvent, _a1 error) *MockEventStorage_FindGymMembershipProlongedEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventStorage_FindGymMembershipProlongedEvents_Call) RunAndReturn(run func(context.Context, uint) ([]GymMembershipProlongedEvent, error)) *MockEventStorage_FindGymMembershipProlongedEvents_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockEventStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEventStorage creates a new instance of MockEventStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEventStorage(t mockConstructorTestingTNewMockEventStorage) *MockEventStorage {
	mock := &MockEventStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

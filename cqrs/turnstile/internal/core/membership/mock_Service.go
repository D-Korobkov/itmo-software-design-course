// Code generated by mockery v2.20.0. DO NOT EDIT.

package membership

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function with given fields: ctx, membershipID
func (_m *MockService) Exists(ctx context.Context, membershipID uint) (bool, error) {
	ret := _m.Called(ctx, membershipID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (bool, error)); ok {
		return rf(ctx, membershipID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) bool); ok {
		r0 = rf(ctx, membershipID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, membershipID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockService_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - membershipID uint
func (_e *MockService_Expecter) Exists(ctx interface{}, membershipID interface{}) *MockService_Exists_Call {
	return &MockService_Exists_Call{Call: _e.mock.On("Exists", ctx, membershipID)}
}

func (_c *MockService_Exists_Call) Run(run func(ctx context.Context, membershipID uint)) *MockService_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockService_Exists_Call) Return(_a0 bool, _a1 error) *MockService_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Exists_Call) RunAndReturn(run func(context.Context, uint) (bool, error)) *MockService_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// IsActive provides a mock function with given fields: ctx, membershipID
func (_m *MockService) IsActive(ctx context.Context, membershipID uint) (bool, error) {
	ret := _m.Called(ctx, membershipID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (bool, error)); ok {
		return rf(ctx, membershipID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) bool); ok {
		r0 = rf(ctx, membershipID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, membershipID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_IsActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsActive'
type MockService_IsActive_Call struct {
	*mock.Call
}

// IsActive is a helper method to define mock.On call
//   - ctx context.Context
//   - membershipID uint
func (_e *MockService_Expecter) IsActive(ctx interface{}, membershipID interface{}) *MockService_IsActive_Call {
	return &MockService_IsActive_Call{Call: _e.mock.On("IsActive", ctx, membershipID)}
}

func (_c *MockService_IsActive_Call) Run(run func(ctx context.Context, membershipID uint)) *MockService_IsActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockService_IsActive_Call) Return(_a0 bool, _a1 error) *MockService_IsActive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_IsActive_Call) RunAndReturn(run func(context.Context, uint) (bool, error)) *MockService_IsActive_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.20.0. DO NOT EDIT.

package turnstile

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUsePassStorage is an autogenerated mock type for the UsePassStorage type
type MockUsePassStorage struct {
	mock.Mock
}

type MockUsePassStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsePassStorage) EXPECT() *MockUsePassStorage_Expecter {
	return &MockUsePassStorage_Expecter{mock: &_m.Mock}
}

// CreateUsePassEvent provides a mock function with given fields: ctx, membershipID, eventType
func (_m *MockUsePassStorage) CreateUsePassEvent(ctx context.Context, membershipID uint, eventType string) error {
	ret := _m.Called(ctx, membershipID, eventType)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) error); ok {
		r0 = rf(ctx, membershipID, eventType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsePassStorage_CreateUsePassEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUsePassEvent'
type MockUsePassStorage_CreateUsePassEvent_Call struct {
	*mock.Call
}

// CreateUsePassEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - membershipID uint
//   - eventType string
func (_e *MockUsePassStorage_Expecter) CreateUsePassEvent(ctx interface{}, membershipID interface{}, eventType interface{}) *MockUsePassStorage_CreateUsePassEvent_Call {
	return &MockUsePassStorage_CreateUsePassEvent_Call{Call: _e.mock.On("CreateUsePassEvent", ctx, membershipID, eventType)}
}

func (_c *MockUsePassStorage_CreateUsePassEvent_Call) Run(run func(ctx context.Context, membershipID uint, eventType string)) *MockUsePassStorage_CreateUsePassEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(string))
	})
	return _c
}

func (_c *MockUsePassStorage_CreateUsePassEvent_Call) Return(_a0 error) *MockUsePassStorage_CreateUsePassEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsePassStorage_CreateUsePassEvent_Call) RunAndReturn(run func(context.Context, uint, string) error) *MockUsePassStorage_CreateUsePassEvent_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockUsePassStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUsePassStorage creates a new instance of MockUsePassStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUsePassStorage(t mockConstructorTestingTNewMockUsePassStorage) *MockUsePassStorage {
	mock := &MockUsePassStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
